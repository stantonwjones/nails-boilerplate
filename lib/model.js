// This is the base definition for a model / collection// ideally used as a wrapper for database integration// should use promise objects to allow for method chaining// eventful.  emits ready event passing itself// start with mongodbmodel.exports = Model;// init references to model base objects for use by controllers// and modelsvar controller_base = require('./controller.js');controller_base.prototype.models = {};Model.prototype.models = {};var model_prot = new Model();var db;var NAME_REQUIRED_ERROR = function() {    return new Error(        'FATAL ERROR::: Named function required for Model constructor method'    );}function Model(){    // createing a new db_connector should automatically open    // connection to database.  A failed connection to database    // should raise an error.    this._connector = new DBConnector();};// TODO: set the connector for the modelModel.connector = null;Model.extend = function(constructor) {    console.log('extending', constructor.name);    if ( !constructor.name ) throw NAME_REQUIRED_ERROR();    model_proto = model_proto || new Model();    constructor.prototype.__proto__ = model_prot;    // TODO: bind collection-specific methods to the constructor    Model.set_db_access_methods(contructor);    // make models available to controller and other models    Model.prototype.models[constructor.name] = constructor;    controller_base.prototype.models[constructor.name] = constructor;};Model.set_db_access_methods = function(constructor) {    constructor.find = Model.find;};Model.prototype.collection_name = function() {    return this.collection || this.constructor.name;};Model.find = function() {    var args = Array.prototype.slice.call(arguments, 0);    return Model.connector.find.apply(connector, args);};Model.prototype.save = function() {    // this should create the model if it does not exist    // (uses an id to check existence)    // or it should update the model    Model.connector.create(this);};Model.prototype.update = function(attrs) {    // should try to update the model's changed attributes if no    // arguments given. Otherwise should attempt to set attributes    // on model and then update    Model.connector.update(this);};Model.prototype.destroy = function() {    // should delete the model from the database if it has been    // persisted    Model.connector.destroy(this);};
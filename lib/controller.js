var _us = require('underscore');
var fs = require('fs');
var events = require('events');

// change this to a curry function which uses the router to
// build a controller.
// the controller listens to the router's event associated with
// it's name in order to process dispatched routes.
//exports.Controller = Controller;
var appRouter;
exports = function(Router) {
    appRouter = Router;
    return Controller;
};

// The base controller definition
/**
 *  The cotroller renders static assets and templates using the parameters
 *  passed to the member functions.
 *
 *  @param {object} options     The optional settings for this controller.  Currently only supports name.
 */
function Controller( options ) {
    if ( !options.name ) throw 'FATAL ERROR::: Name required for Controller';

    // Initiate settings
    var defaults = {
    };
    var settings = _us.extend( {}, defaults, settings );

    // Create and configure the eventer
    appRouter.on('dispatch:' + options.name, function(){}); // Process router dispatch
    this.on('404', this[404]);
    this.on('500', this[500]);

}

Controller.prototype = _us.extend( new events.EventEmitter(), {

    /****  Network Methods  *****/
    /**
     *  The main entry function of the controller.
     *
     *  @param {string} action      The action called for this controller
     *  @param {object} params     The parameter hash for this action
     *  @param {object} request     The http request object from the http server
     *  @param {object} response    The http response object from the http server
     */
    _do: function( action, params, request, response ) {
        //this.emit( '_do', action, params, request, response );
        this._generateResponse( action, params, request, response );
    },

    /**
     * Handles the action and params passed to this controller effectively
     *
     *  @param {string} action      The action requested by the router
     *  @param {object} params      The params generated by the router from the request url
     *  @param {object} request     The initial request object (may not actually be needed)
     *  @param {object} response    The response to write to
     */
    _generateResponse: function( action, params, request, response ) {
        var responseData;
        if ( typeof this[action] != 'function' ) {
            responseData = this[404](params);
        } else {
            responseData = this[action](params);
        }
        this._render( response, responseData );
    },

    /**
     *  Write to the response using the params returned by dispatch
     *
     *  @param {object} response        The response object to write to
     *  @param {object} responseParams  The object containing info to write to response
     */
    _render: function( response, responseParams ) {
        response.writeHead( responseParams.code, responseParams.head );
        // Will probs have to change this due to memory overhead of not using a buffer
        response.end( responseParams.content );
    },


    /**
     *  Hook for serving a static file. Use if the file parameter exists
     *
     *  @param {object} params  The route params for the file request
     */
    file: function( params ) {
        // TODO: Abstract path concatenation into its own file which worries about slashes (/)
        // TODO: optimize file manipulation to use asynchronous read/writes and memory buffers
        var path = params.path ? params.path + '/' + params.file : '/' + params.file;
        var content;
        try {
            content = this.getAsset( params.ext, path );
        } catch(err) {
            return this[404]();
        }
        // TODO: abstract these objects out to a function
        // success/fail/redirect, etc.
        return {
            code: 200,
            header: {'Content-Type': Nails.application.mimes[params.ext]},
            content: content
        };
    },

    /**
     *  The default index function for retrieving the index
     */
    index: function index( params ) {
        var content = this.getView( 'index' );
        console.log( content );
        return {
            code: 200,
            header: {'Content-Type': 'text/plain'},
            content: content
        };
        // This should work (ideally)
        // this.getView();
    },

    /**
     *  The default handler for a 404 error code
     */
    404: function() {
        return {
            code: 404,
            header: {'Content-Type': 'text/plain'},
            content: 'Page Not Found'
        };
    },

    /**
     *  The default handler for a 500 error code
     */
    500: function(exception) {
        // Check if the stack has been passed along
        var stackTrace = exception.stack || '' || exception;

        return {
            code: 500,
            header: {'Content-Type': 'text/plain'},
            content: 'Internal Server Error\n\n' + stackTrace
        };
    },

    /***** UTILITY FUNCTIONS *****/
    // Eventer accessor methods
    error: function() {
        this.emit('error', arguments);
    },

    // Asset getter methods
    /**
     *  Retrieves named view content for the controller action
     *
     *  @param {string} view    The name of the view to retrieve.
     */
    getView: function( view ) {
        var path = Nails.application.config.VIEWS_ROOT +
                [ '', this.name, (view) ? view : this.getView.caller.name ].join('/');
        return fs.readFileSync( filePath, 'utf8' );
    },

    /**
     *  Returns a static asset
     *
     *  @param {string}   ext   The file extension of this asset
     *  @param {string}   path  The path to this asset (from root directory for this asset type)
     */
    getAsset: function( ext, path ) {
        var filePath = this.rootPathForType(ext) + path;
        return fs.readFileSync( filePath );
    },

    /**
     *  Returns the path for a specific static file type.
     *
     *  @param {string}  ext    The file extension of this asset
     */
    rootPathForType: function( ext ) {
        var config = Nails.application.config;
        var type = Nails.application.mimes[ext] ? Nails.application.mimes[ext].type : null ;
        if ( !type ) return config.STATIC_ROOT;
        return {
            page: config.STATIC_ROOT,
            style: config.CSS_ROOT,
            image: config.IMG_ROOT,
            script: config.JS_ROOT
        }[type];
    }
});
